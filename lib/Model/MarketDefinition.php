<?php
/**
 * MarketDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Betfair: Exchange Streaming API
 *
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * MarketDefinition Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MarketDefinition implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MarketDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'venue' => 'string',
        'settled_time' => '\DateTime',
        'timezone' => 'string',
        'each_way_divisor' => 'double',
        'regulators' => 'string[]',
        'market_type' => 'string',
        'market_base_rate' => 'double',
        'number_of_winners' => 'int',
        'country_code' => 'string',
        'in_play' => 'bool',
        'bet_delay' => 'int',
        'bsp_market' => 'bool',
        'betting_type' => 'string',
        'number_of_active_runners' => 'int',
        'event_id' => 'string',
        'cross_matching' => 'bool',
        'runners_voidable' => 'bool',
        'turn_in_play_enabled' => 'bool',
        'suspend_time' => '\DateTime',
        'discount_allowed' => 'bool',
        'persistence_enabled' => 'bool',
        'runners' => '\Swagger\Client\Model\RunnerDefinition[]',
        'version' => 'int',
        'event_type_id' => 'string',
        'complete' => 'bool',
        'open_date' => '\DateTime',
        'market_time' => '\DateTime',
        'bsp_reconciled' => 'bool',
        'status' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'venue' => 'venue',
        'settled_time' => 'settledTime',
        'timezone' => 'timezone',
        'each_way_divisor' => 'eachWayDivisor',
        'regulators' => 'regulators',
        'market_type' => 'marketType',
        'market_base_rate' => 'marketBaseRate',
        'number_of_winners' => 'numberOfWinners',
        'country_code' => 'countryCode',
        'in_play' => 'inPlay',
        'bet_delay' => 'betDelay',
        'bsp_market' => 'bspMarket',
        'betting_type' => 'bettingType',
        'number_of_active_runners' => 'numberOfActiveRunners',
        'event_id' => 'eventId',
        'cross_matching' => 'crossMatching',
        'runners_voidable' => 'runnersVoidable',
        'turn_in_play_enabled' => 'turnInPlayEnabled',
        'suspend_time' => 'suspendTime',
        'discount_allowed' => 'discountAllowed',
        'persistence_enabled' => 'persistenceEnabled',
        'runners' => 'runners',
        'version' => 'version',
        'event_type_id' => 'eventTypeId',
        'complete' => 'complete',
        'open_date' => 'openDate',
        'market_time' => 'marketTime',
        'bsp_reconciled' => 'bspReconciled',
        'status' => 'status'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'venue' => 'setVenue',
        'settled_time' => 'setSettledTime',
        'timezone' => 'setTimezone',
        'each_way_divisor' => 'setEachWayDivisor',
        'regulators' => 'setRegulators',
        'market_type' => 'setMarketType',
        'market_base_rate' => 'setMarketBaseRate',
        'number_of_winners' => 'setNumberOfWinners',
        'country_code' => 'setCountryCode',
        'in_play' => 'setInPlay',
        'bet_delay' => 'setBetDelay',
        'bsp_market' => 'setBspMarket',
        'betting_type' => 'setBettingType',
        'number_of_active_runners' => 'setNumberOfActiveRunners',
        'event_id' => 'setEventId',
        'cross_matching' => 'setCrossMatching',
        'runners_voidable' => 'setRunnersVoidable',
        'turn_in_play_enabled' => 'setTurnInPlayEnabled',
        'suspend_time' => 'setSuspendTime',
        'discount_allowed' => 'setDiscountAllowed',
        'persistence_enabled' => 'setPersistenceEnabled',
        'runners' => 'setRunners',
        'version' => 'setVersion',
        'event_type_id' => 'setEventTypeId',
        'complete' => 'setComplete',
        'open_date' => 'setOpenDate',
        'market_time' => 'setMarketTime',
        'bsp_reconciled' => 'setBspReconciled',
        'status' => 'setStatus'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'venue' => 'getVenue',
        'settled_time' => 'getSettledTime',
        'timezone' => 'getTimezone',
        'each_way_divisor' => 'getEachWayDivisor',
        'regulators' => 'getRegulators',
        'market_type' => 'getMarketType',
        'market_base_rate' => 'getMarketBaseRate',
        'number_of_winners' => 'getNumberOfWinners',
        'country_code' => 'getCountryCode',
        'in_play' => 'getInPlay',
        'bet_delay' => 'getBetDelay',
        'bsp_market' => 'getBspMarket',
        'betting_type' => 'getBettingType',
        'number_of_active_runners' => 'getNumberOfActiveRunners',
        'event_id' => 'getEventId',
        'cross_matching' => 'getCrossMatching',
        'runners_voidable' => 'getRunnersVoidable',
        'turn_in_play_enabled' => 'getTurnInPlayEnabled',
        'suspend_time' => 'getSuspendTime',
        'discount_allowed' => 'getDiscountAllowed',
        'persistence_enabled' => 'getPersistenceEnabled',
        'runners' => 'getRunners',
        'version' => 'getVersion',
        'event_type_id' => 'getEventTypeId',
        'complete' => 'getComplete',
        'open_date' => 'getOpenDate',
        'market_time' => 'getMarketTime',
        'bsp_reconciled' => 'getBspReconciled',
        'status' => 'getStatus'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const BETTING_TYPE_ODDS = 'ODDS';
    const BETTING_TYPE_LINE = 'LINE';
    const BETTING_TYPE_RANGE = 'RANGE';
    const BETTING_TYPE_ASIAN_HANDICAP_DOUBLE_LINE = 'ASIAN_HANDICAP_DOUBLE_LINE';
    const BETTING_TYPE_ASIAN_HANDICAP_SINGLE_LINE = 'ASIAN_HANDICAP_SINGLE_LINE';
    const STATUS_INACTIVE = 'INACTIVE';
    const STATUS_OPEN = 'OPEN';
    const STATUS_SUSPENDED = 'SUSPENDED';
    const STATUS_CLOSED = 'CLOSED';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBettingTypeAllowableValues()
    {
        return [
            self::BETTING_TYPE_ODDS,
            self::BETTING_TYPE_LINE,
            self::BETTING_TYPE_RANGE,
            self::BETTING_TYPE_ASIAN_HANDICAP_DOUBLE_LINE,
            self::BETTING_TYPE_ASIAN_HANDICAP_SINGLE_LINE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_INACTIVE,
            self::STATUS_OPEN,
            self::STATUS_SUSPENDED,
            self::STATUS_CLOSED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['venue'] = isset($data['venue']) ? $data['venue'] : null;
        $this->container['settled_time'] = isset($data['settled_time']) ? $data['settled_time'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['each_way_divisor'] = isset($data['each_way_divisor']) ? $data['each_way_divisor'] : null;
        $this->container['regulators'] = isset($data['regulators']) ? $data['regulators'] : null;
        $this->container['market_type'] = isset($data['market_type']) ? $data['market_type'] : null;
        $this->container['market_base_rate'] = isset($data['market_base_rate']) ? $data['market_base_rate'] : null;
        $this->container['number_of_winners'] = isset($data['number_of_winners']) ? $data['number_of_winners'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['in_play'] = isset($data['in_play']) ? $data['in_play'] : null;
        $this->container['bet_delay'] = isset($data['bet_delay']) ? $data['bet_delay'] : null;
        $this->container['bsp_market'] = isset($data['bsp_market']) ? $data['bsp_market'] : null;
        $this->container['betting_type'] = isset($data['betting_type']) ? $data['betting_type'] : null;
        $this->container['number_of_active_runners'] = isset($data['number_of_active_runners']) ? $data['number_of_active_runners'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['cross_matching'] = isset($data['cross_matching']) ? $data['cross_matching'] : null;
        $this->container['runners_voidable'] = isset($data['runners_voidable']) ? $data['runners_voidable'] : null;
        $this->container['turn_in_play_enabled'] = isset($data['turn_in_play_enabled']) ? $data['turn_in_play_enabled'] : null;
        $this->container['suspend_time'] = isset($data['suspend_time']) ? $data['suspend_time'] : null;
        $this->container['discount_allowed'] = isset($data['discount_allowed']) ? $data['discount_allowed'] : null;
        $this->container['persistence_enabled'] = isset($data['persistence_enabled']) ? $data['persistence_enabled'] : null;
        $this->container['runners'] = isset($data['runners']) ? $data['runners'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['event_type_id'] = isset($data['event_type_id']) ? $data['event_type_id'] : null;
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
        $this->container['open_date'] = isset($data['open_date']) ? $data['open_date'] : null;
        $this->container['market_time'] = isset($data['market_time']) ? $data['market_time'] : null;
        $this->container['bsp_reconciled'] = isset($data['bsp_reconciled']) ? $data['bsp_reconciled'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("ODDS", "LINE", "RANGE", "ASIAN_HANDICAP_DOUBLE_LINE", "ASIAN_HANDICAP_SINGLE_LINE");
        if (!in_array($this->container['betting_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'betting_type', must be one of #{allowed_values}.";
        }

        $allowed_values = array("INACTIVE", "OPEN", "SUSPENDED", "CLOSED");
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("ODDS", "LINE", "RANGE", "ASIAN_HANDICAP_DOUBLE_LINE", "ASIAN_HANDICAP_SINGLE_LINE");
        if (!in_array($this->container['betting_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("INACTIVE", "OPEN", "SUSPENDED", "CLOSED");
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets venue
     * @return string
     */
    public function getVenue()
    {
        return $this->container['venue'];
    }

    /**
     * Sets venue
     * @param string $venue
     * @return $this
     */
    public function setVenue($venue)
    {
        $this->container['venue'] = $venue;

        return $this;
    }

    /**
     * Gets settled_time
     * @return \DateTime
     */
    public function getSettledTime()
    {
        return $this->container['settled_time'];
    }

    /**
     * Sets settled_time
     * @param \DateTime $settled_time
     * @return $this
     */
    public function setSettledTime($settled_time)
    {
        $this->container['settled_time'] = $settled_time;

        return $this;
    }

    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param string $timezone
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets each_way_divisor
     * @return double
     */
    public function getEachWayDivisor()
    {
        return $this->container['each_way_divisor'];
    }

    /**
     * Sets each_way_divisor
     * @param double $each_way_divisor
     * @return $this
     */
    public function setEachWayDivisor($each_way_divisor)
    {
        $this->container['each_way_divisor'] = $each_way_divisor;

        return $this;
    }

    /**
     * Gets regulators
     * @return string[]
     */
    public function getRegulators()
    {
        return $this->container['regulators'];
    }

    /**
     * Sets regulators
     * @param string[] $regulators The market regulators.
     * @return $this
     */
    public function setRegulators($regulators)
    {
        $this->container['regulators'] = $regulators;

        return $this;
    }

    /**
     * Gets market_type
     * @return string
     */
    public function getMarketType()
    {
        return $this->container['market_type'];
    }

    /**
     * Sets market_type
     * @param string $market_type
     * @return $this
     */
    public function setMarketType($market_type)
    {
        $this->container['market_type'] = $market_type;

        return $this;
    }

    /**
     * Gets market_base_rate
     * @return double
     */
    public function getMarketBaseRate()
    {
        return $this->container['market_base_rate'];
    }

    /**
     * Sets market_base_rate
     * @param double $market_base_rate
     * @return $this
     */
    public function setMarketBaseRate($market_base_rate)
    {
        $this->container['market_base_rate'] = $market_base_rate;

        return $this;
    }

    /**
     * Gets number_of_winners
     * @return int
     */
    public function getNumberOfWinners()
    {
        return $this->container['number_of_winners'];
    }

    /**
     * Sets number_of_winners
     * @param int $number_of_winners
     * @return $this
     */
    public function setNumberOfWinners($number_of_winners)
    {
        $this->container['number_of_winners'] = $number_of_winners;

        return $this;
    }

    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets in_play
     * @return bool
     */
    public function getInPlay()
    {
        return $this->container['in_play'];
    }

    /**
     * Sets in_play
     * @param bool $in_play
     * @return $this
     */
    public function setInPlay($in_play)
    {
        $this->container['in_play'] = $in_play;

        return $this;
    }

    /**
     * Gets bet_delay
     * @return int
     */
    public function getBetDelay()
    {
        return $this->container['bet_delay'];
    }

    /**
     * Sets bet_delay
     * @param int $bet_delay
     * @return $this
     */
    public function setBetDelay($bet_delay)
    {
        $this->container['bet_delay'] = $bet_delay;

        return $this;
    }

    /**
     * Gets bsp_market
     * @return bool
     */
    public function getBspMarket()
    {
        return $this->container['bsp_market'];
    }

    /**
     * Sets bsp_market
     * @param bool $bsp_market
     * @return $this
     */
    public function setBspMarket($bsp_market)
    {
        $this->container['bsp_market'] = $bsp_market;

        return $this;
    }

    /**
     * Gets betting_type
     * @return string
     */
    public function getBettingType()
    {
        return $this->container['betting_type'];
    }

    /**
     * Sets betting_type
     * @param string $betting_type
     * @return $this
     */
    public function setBettingType($betting_type)
    {
        $allowed_values = array('ODDS', 'LINE', 'RANGE', 'ASIAN_HANDICAP_DOUBLE_LINE', 'ASIAN_HANDICAP_SINGLE_LINE');
        if (!in_array($betting_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'betting_type', must be one of 'ODDS', 'LINE', 'RANGE', 'ASIAN_HANDICAP_DOUBLE_LINE', 'ASIAN_HANDICAP_SINGLE_LINE'");
        }
        $this->container['betting_type'] = $betting_type;

        return $this;
    }

    /**
     * Gets number_of_active_runners
     * @return int
     */
    public function getNumberOfActiveRunners()
    {
        return $this->container['number_of_active_runners'];
    }

    /**
     * Sets number_of_active_runners
     * @param int $number_of_active_runners
     * @return $this
     */
    public function setNumberOfActiveRunners($number_of_active_runners)
    {
        $this->container['number_of_active_runners'] = $number_of_active_runners;

        return $this;
    }

    /**
     * Gets event_id
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     * @param string $event_id
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets cross_matching
     * @return bool
     */
    public function getCrossMatching()
    {
        return $this->container['cross_matching'];
    }

    /**
     * Sets cross_matching
     * @param bool $cross_matching
     * @return $this
     */
    public function setCrossMatching($cross_matching)
    {
        $this->container['cross_matching'] = $cross_matching;

        return $this;
    }

    /**
     * Gets runners_voidable
     * @return bool
     */
    public function getRunnersVoidable()
    {
        return $this->container['runners_voidable'];
    }

    /**
     * Sets runners_voidable
     * @param bool $runners_voidable
     * @return $this
     */
    public function setRunnersVoidable($runners_voidable)
    {
        $this->container['runners_voidable'] = $runners_voidable;

        return $this;
    }

    /**
     * Gets turn_in_play_enabled
     * @return bool
     */
    public function getTurnInPlayEnabled()
    {
        return $this->container['turn_in_play_enabled'];
    }

    /**
     * Sets turn_in_play_enabled
     * @param bool $turn_in_play_enabled
     * @return $this
     */
    public function setTurnInPlayEnabled($turn_in_play_enabled)
    {
        $this->container['turn_in_play_enabled'] = $turn_in_play_enabled;

        return $this;
    }

    /**
     * Gets suspend_time
     * @return \DateTime
     */
    public function getSuspendTime()
    {
        return $this->container['suspend_time'];
    }

    /**
     * Sets suspend_time
     * @param \DateTime $suspend_time
     * @return $this
     */
    public function setSuspendTime($suspend_time)
    {
        $this->container['suspend_time'] = $suspend_time;

        return $this;
    }

    /**
     * Gets discount_allowed
     * @return bool
     */
    public function getDiscountAllowed()
    {
        return $this->container['discount_allowed'];
    }

    /**
     * Sets discount_allowed
     * @param bool $discount_allowed
     * @return $this
     */
    public function setDiscountAllowed($discount_allowed)
    {
        $this->container['discount_allowed'] = $discount_allowed;

        return $this;
    }

    /**
     * Gets persistence_enabled
     * @return bool
     */
    public function getPersistenceEnabled()
    {
        return $this->container['persistence_enabled'];
    }

    /**
     * Sets persistence_enabled
     * @param bool $persistence_enabled
     * @return $this
     */
    public function setPersistenceEnabled($persistence_enabled)
    {
        $this->container['persistence_enabled'] = $persistence_enabled;

        return $this;
    }

    /**
     * Gets runners
     * @return \Swagger\Client\Model\RunnerDefinition[]
     */
    public function getRunners()
    {
        return $this->container['runners'];
    }

    /**
     * Sets runners
     * @param \Swagger\Client\Model\RunnerDefinition[] $runners
     * @return $this
     */
    public function setRunners($runners)
    {
        $this->container['runners'] = $runners;

        return $this;
    }

    /**
     * Gets version
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param int $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets event_type_id
     * @return string
     */
    public function getEventTypeId()
    {
        return $this->container['event_type_id'];
    }

    /**
     * Sets event_type_id
     * @param string $event_type_id The Event Type the market is contained within.
     * @return $this
     */
    public function setEventTypeId($event_type_id)
    {
        $this->container['event_type_id'] = $event_type_id;

        return $this;
    }

    /**
     * Gets complete
     * @return bool
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     * @param bool $complete
     * @return $this
     */
    public function setComplete($complete)
    {
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets open_date
     * @return \DateTime
     */
    public function getOpenDate()
    {
        return $this->container['open_date'];
    }

    /**
     * Sets open_date
     * @param \DateTime $open_date
     * @return $this
     */
    public function setOpenDate($open_date)
    {
        $this->container['open_date'] = $open_date;

        return $this;
    }

    /**
     * Gets market_time
     * @return \DateTime
     */
    public function getMarketTime()
    {
        return $this->container['market_time'];
    }

    /**
     * Sets market_time
     * @param \DateTime $market_time
     * @return $this
     */
    public function setMarketTime($market_time)
    {
        $this->container['market_time'] = $market_time;

        return $this;
    }

    /**
     * Gets bsp_reconciled
     * @return bool
     */
    public function getBspReconciled()
    {
        return $this->container['bsp_reconciled'];
    }

    /**
     * Sets bsp_reconciled
     * @param bool $bsp_reconciled
     * @return $this
     */
    public function setBspReconciled($bsp_reconciled)
    {
        $this->container['bsp_reconciled'] = $bsp_reconciled;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('INACTIVE', 'OPEN', 'SUSPENDED', 'CLOSED');
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'INACTIVE', 'OPEN', 'SUSPENDED', 'CLOSED'");
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


