<?php
/**
 * OrderRunnerChange
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Betfair: Exchange Streaming API
 *
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OrderRunnerChange Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderRunnerChange implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderRunnerChange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'mb' => 'double[][]',
        'uo' => '\Swagger\Client\Model\Order[]',
        'id' => 'int',
        'hc' => 'double',
        'full_image' => 'bool',
        'ml' => 'double[][]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'mb' => 'mb',
        'uo' => 'uo',
        'id' => 'id',
        'hc' => 'hc',
        'full_image' => 'fullImage',
        'ml' => 'ml'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'mb' => 'setMb',
        'uo' => 'setUo',
        'id' => 'setId',
        'hc' => 'setHc',
        'full_image' => 'setFullImage',
        'ml' => 'setMl'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'mb' => 'getMb',
        'uo' => 'getUo',
        'id' => 'getId',
        'hc' => 'getHc',
        'full_image' => 'getFullImage',
        'ml' => 'getMl'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mb'] = isset($data['mb']) ? $data['mb'] : null;
        $this->container['uo'] = isset($data['uo']) ? $data['uo'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['hc'] = isset($data['hc']) ? $data['hc'] : null;
        $this->container['full_image'] = isset($data['full_image']) ? $data['full_image'] : null;
        $this->container['ml'] = isset($data['ml']) ? $data['ml'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets mb
     * @return double[][]
     */
    public function getMb()
    {
        return $this->container['mb'];
    }

    /**
     * Sets mb
     * @param double[][] $mb Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)
     * @return $this
     */
    public function setMb($mb)
    {
        $this->container['mb'] = $mb;

        return $this;
    }

    /**
     * Gets uo
     * @return \Swagger\Client\Model\Order[]
     */
    public function getUo()
    {
        return $this->container['uo'];
    }

    /**
     * Sets uo
     * @param \Swagger\Client\Model\Order[] $uo Unmatched Orders - orders on this runner (selection) that are not fully matched
     * @return $this
     */
    public function setUo($uo)
    {
        $this->container['uo'] = $uo;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Selection Id - the id of the runner (selection)
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets hc
     * @return double
     */
    public function getHc()
    {
        return $this->container['hc'];
    }

    /**
     * Sets hc
     * @param double $hc Handicap - the handicap of the runner (selection) (null if not applicable)
     * @return $this
     */
    public function setHc($hc)
    {
        $this->container['hc'] = $hc;

        return $this;
    }

    /**
     * Gets full_image
     * @return bool
     */
    public function getFullImage()
    {
        return $this->container['full_image'];
    }

    /**
     * Sets full_image
     * @param bool $full_image
     * @return $this
     */
    public function setFullImage($full_image)
    {
        $this->container['full_image'] = $full_image;

        return $this;
    }

    /**
     * Gets ml
     * @return double[][]
     */
    public function getMl()
    {
        return $this->container['ml'];
    }

    /**
     * Sets ml
     * @param double[][] $ml Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)
     * @return $this
     */
    public function setMl($ml)
    {
        $this->container['ml'] = $ml;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


