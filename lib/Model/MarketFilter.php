<?php
/**
 * MarketFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Betfair: Exchange Streaming API
 *
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * MarketFilter Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MarketFilter implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MarketFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'country_codes' => 'string[]',
        'betting_types' => 'string[]',
        'turn_in_play_enabled' => 'bool',
        'market_types' => 'string[]',
        'venues' => 'string[]',
        'market_ids' => 'string[]',
        'event_type_ids' => 'string[]',
        'event_ids' => 'string[]',
        'bsp_market' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'country_codes' => 'countryCodes',
        'betting_types' => 'bettingTypes',
        'turn_in_play_enabled' => 'turnInPlayEnabled',
        'market_types' => 'marketTypes',
        'venues' => 'venues',
        'market_ids' => 'marketIds',
        'event_type_ids' => 'eventTypeIds',
        'event_ids' => 'eventIds',
        'bsp_market' => 'bspMarket'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'country_codes' => 'setCountryCodes',
        'betting_types' => 'setBettingTypes',
        'turn_in_play_enabled' => 'setTurnInPlayEnabled',
        'market_types' => 'setMarketTypes',
        'venues' => 'setVenues',
        'market_ids' => 'setMarketIds',
        'event_type_ids' => 'setEventTypeIds',
        'event_ids' => 'setEventIds',
        'bsp_market' => 'setBspMarket'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'country_codes' => 'getCountryCodes',
        'betting_types' => 'getBettingTypes',
        'turn_in_play_enabled' => 'getTurnInPlayEnabled',
        'market_types' => 'getMarketTypes',
        'venues' => 'getVenues',
        'market_ids' => 'getMarketIds',
        'event_type_ids' => 'getEventTypeIds',
        'event_ids' => 'getEventIds',
        'bsp_market' => 'getBspMarket'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const BETTING_TYPES_ODDS = 'ODDS';
    const BETTING_TYPES_LINE = 'LINE';
    const BETTING_TYPES_RANGE = 'RANGE';
    const BETTING_TYPES_ASIAN_HANDICAP_DOUBLE_LINE = 'ASIAN_HANDICAP_DOUBLE_LINE';
    const BETTING_TYPES_ASIAN_HANDICAP_SINGLE_LINE = 'ASIAN_HANDICAP_SINGLE_LINE';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBettingTypesAllowableValues()
    {
        return [
            self::BETTING_TYPES_ODDS,
            self::BETTING_TYPES_LINE,
            self::BETTING_TYPES_RANGE,
            self::BETTING_TYPES_ASIAN_HANDICAP_DOUBLE_LINE,
            self::BETTING_TYPES_ASIAN_HANDICAP_SINGLE_LINE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country_codes'] = isset($data['country_codes']) ? $data['country_codes'] : null;
        $this->container['betting_types'] = isset($data['betting_types']) ? $data['betting_types'] : null;
        $this->container['turn_in_play_enabled'] = isset($data['turn_in_play_enabled']) ? $data['turn_in_play_enabled'] : null;
        $this->container['market_types'] = isset($data['market_types']) ? $data['market_types'] : null;
        $this->container['venues'] = isset($data['venues']) ? $data['venues'] : null;
        $this->container['market_ids'] = isset($data['market_ids']) ? $data['market_ids'] : null;
        $this->container['event_type_ids'] = isset($data['event_type_ids']) ? $data['event_type_ids'] : null;
        $this->container['event_ids'] = isset($data['event_ids']) ? $data['event_ids'] : null;
        $this->container['bsp_market'] = isset($data['bsp_market']) ? $data['bsp_market'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets country_codes
     * @return string[]
     */
    public function getCountryCodes()
    {
        return $this->container['country_codes'];
    }

    /**
     * Sets country_codes
     * @param string[] $country_codes
     * @return $this
     */
    public function setCountryCodes($country_codes)
    {
        $this->container['country_codes'] = $country_codes;

        return $this;
    }

    /**
     * Gets betting_types
     * @return string[]
     */
    public function getBettingTypes()
    {
        return $this->container['betting_types'];
    }

    /**
     * Sets betting_types
     * @param string[] $betting_types
     * @return $this
     */
    public function setBettingTypes($betting_types)
    {
        $allowed_values = array('ODDS', 'LINE', 'RANGE', 'ASIAN_HANDICAP_DOUBLE_LINE', 'ASIAN_HANDICAP_SINGLE_LINE');
        if (!in_array($betting_types, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'betting_types', must be one of 'ODDS', 'LINE', 'RANGE', 'ASIAN_HANDICAP_DOUBLE_LINE', 'ASIAN_HANDICAP_SINGLE_LINE'");
        }
        $this->container['betting_types'] = $betting_types;

        return $this;
    }

    /**
     * Gets turn_in_play_enabled
     * @return bool
     */
    public function getTurnInPlayEnabled()
    {
        return $this->container['turn_in_play_enabled'];
    }

    /**
     * Sets turn_in_play_enabled
     * @param bool $turn_in_play_enabled
     * @return $this
     */
    public function setTurnInPlayEnabled($turn_in_play_enabled)
    {
        $this->container['turn_in_play_enabled'] = $turn_in_play_enabled;

        return $this;
    }

    /**
     * Gets market_types
     * @return string[]
     */
    public function getMarketTypes()
    {
        return $this->container['market_types'];
    }

    /**
     * Sets market_types
     * @param string[] $market_types
     * @return $this
     */
    public function setMarketTypes($market_types)
    {
        $this->container['market_types'] = $market_types;

        return $this;
    }

    /**
     * Gets venues
     * @return string[]
     */
    public function getVenues()
    {
        return $this->container['venues'];
    }

    /**
     * Sets venues
     * @param string[] $venues
     * @return $this
     */
    public function setVenues($venues)
    {
        $this->container['venues'] = $venues;

        return $this;
    }

    /**
     * Gets market_ids
     * @return string[]
     */
    public function getMarketIds()
    {
        return $this->container['market_ids'];
    }

    /**
     * Sets market_ids
     * @param string[] $market_ids
     * @return $this
     */
    public function setMarketIds($market_ids)
    {
        $this->container['market_ids'] = $market_ids;

        return $this;
    }

    /**
     * Gets event_type_ids
     * @return string[]
     */
    public function getEventTypeIds()
    {
        return $this->container['event_type_ids'];
    }

    /**
     * Sets event_type_ids
     * @param string[] $event_type_ids
     * @return $this
     */
    public function setEventTypeIds($event_type_ids)
    {
        $this->container['event_type_ids'] = $event_type_ids;

        return $this;
    }

    /**
     * Gets event_ids
     * @return string[]
     */
    public function getEventIds()
    {
        return $this->container['event_ids'];
    }

    /**
     * Sets event_ids
     * @param string[] $event_ids
     * @return $this
     */
    public function setEventIds($event_ids)
    {
        $this->container['event_ids'] = $event_ids;

        return $this;
    }

    /**
     * Gets bsp_market
     * @return bool
     */
    public function getBspMarket()
    {
        return $this->container['bsp_market'];
    }

    /**
     * Sets bsp_market
     * @param bool $bsp_market
     * @return $this
     */
    public function setBspMarket($bsp_market)
    {
        $this->container['bsp_market'] = $bsp_market;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


