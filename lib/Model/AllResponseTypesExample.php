<?php
/**
 * AllResponseTypesExample
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Betfair: Exchange Streaming API
 *
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AllResponseTypesExample Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AllResponseTypesExample implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AllResponseTypesExample';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'op_types' => 'string',
        'market_change_message' => '\Swagger\Client\Model\MarketChangeMessage',
        'connection' => '\Swagger\Client\Model\ConnectionMessage',
        'order_change_message' => '\Swagger\Client\Model\OrderChangeMessage',
        'status' => '\Swagger\Client\Model\StatusMessage'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'op_types' => 'opTypes',
        'market_change_message' => 'marketChangeMessage',
        'connection' => 'connection',
        'order_change_message' => 'orderChangeMessage',
        'status' => 'status'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'op_types' => 'setOpTypes',
        'market_change_message' => 'setMarketChangeMessage',
        'connection' => 'setConnection',
        'order_change_message' => 'setOrderChangeMessage',
        'status' => 'setStatus'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'op_types' => 'getOpTypes',
        'market_change_message' => 'getMarketChangeMessage',
        'connection' => 'getConnection',
        'order_change_message' => 'getOrderChangeMessage',
        'status' => 'getStatus'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const OP_TYPES_CONNECTION = 'connection';
    const OP_TYPES_STATUS = 'status';
    const OP_TYPES_MCM = 'mcm';
    const OP_TYPES_OCM = 'ocm';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOpTypesAllowableValues()
    {
        return [
            self::OP_TYPES_CONNECTION,
            self::OP_TYPES_STATUS,
            self::OP_TYPES_MCM,
            self::OP_TYPES_OCM,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['op_types'] = isset($data['op_types']) ? $data['op_types'] : null;
        $this->container['market_change_message'] = isset($data['market_change_message']) ? $data['market_change_message'] : null;
        $this->container['connection'] = isset($data['connection']) ? $data['connection'] : null;
        $this->container['order_change_message'] = isset($data['order_change_message']) ? $data['order_change_message'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("connection", "status", "mcm", "ocm");
        if (!in_array($this->container['op_types'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'op_types', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("connection", "status", "mcm", "ocm");
        if (!in_array($this->container['op_types'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets op_types
     * @return string
     */
    public function getOpTypes()
    {
        return $this->container['op_types'];
    }

    /**
     * Sets op_types
     * @param string $op_types
     * @return $this
     */
    public function setOpTypes($op_types)
    {
        $allowed_values = array('connection', 'status', 'mcm', 'ocm');
        if (!in_array($op_types, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'op_types', must be one of 'connection', 'status', 'mcm', 'ocm'");
        }
        $this->container['op_types'] = $op_types;

        return $this;
    }

    /**
     * Gets market_change_message
     * @return \Swagger\Client\Model\MarketChangeMessage
     */
    public function getMarketChangeMessage()
    {
        return $this->container['market_change_message'];
    }

    /**
     * Sets market_change_message
     * @param \Swagger\Client\Model\MarketChangeMessage $market_change_message
     * @return $this
     */
    public function setMarketChangeMessage($market_change_message)
    {
        $this->container['market_change_message'] = $market_change_message;

        return $this;
    }

    /**
     * Gets connection
     * @return \Swagger\Client\Model\ConnectionMessage
     */
    public function getConnection()
    {
        return $this->container['connection'];
    }

    /**
     * Sets connection
     * @param \Swagger\Client\Model\ConnectionMessage $connection
     * @return $this
     */
    public function setConnection($connection)
    {
        $this->container['connection'] = $connection;

        return $this;
    }

    /**
     * Gets order_change_message
     * @return \Swagger\Client\Model\OrderChangeMessage
     */
    public function getOrderChangeMessage()
    {
        return $this->container['order_change_message'];
    }

    /**
     * Sets order_change_message
     * @param \Swagger\Client\Model\OrderChangeMessage $order_change_message
     * @return $this
     */
    public function setOrderChangeMessage($order_change_message)
    {
        $this->container['order_change_message'] = $order_change_message;

        return $this;
    }

    /**
     * Gets status
     * @return \Swagger\Client\Model\StatusMessage
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Swagger\Client\Model\StatusMessage $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


