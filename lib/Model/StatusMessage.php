<?php
/**
 * StatusMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Betfair: Exchange Streaming API
 *
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * StatusMessage Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StatusMessage extends ResponseMessage implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'StatusMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'error_message' => 'string',
        'error_code' => 'string',
        'connection_id' => 'string',
        'connection_closed' => 'bool',
        'status_code' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'error_message' => 'errorMessage',
        'error_code' => 'errorCode',
        'connection_id' => 'connectionId',
        'connection_closed' => 'connectionClosed',
        'status_code' => 'statusCode'
    );

    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'error_message' => 'setErrorMessage',
        'error_code' => 'setErrorCode',
        'connection_id' => 'setConnectionId',
        'connection_closed' => 'setConnectionClosed',
        'status_code' => 'setStatusCode'
    );

    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'error_message' => 'getErrorMessage',
        'error_code' => 'getErrorCode',
        'connection_id' => 'getConnectionId',
        'connection_closed' => 'getConnectionClosed',
        'status_code' => 'getStatusCode'
    );

    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    const ERROR_CODE_NO_APP_KEY = 'NO_APP_KEY';
    const ERROR_CODE_INVALID_APP_KEY = 'INVALID_APP_KEY';
    const ERROR_CODE_NO_SESSION = 'NO_SESSION';
    const ERROR_CODE_INVALID_SESSION_INFORMATION = 'INVALID_SESSION_INFORMATION';
    const ERROR_CODE_NOT_AUTHORIZED = 'NOT_AUTHORIZED';
    const ERROR_CODE_INVALID_INPUT = 'INVALID_INPUT';
    const ERROR_CODE_INVALID_CLOCK = 'INVALID_CLOCK';
    const ERROR_CODE_UNEXPECTED_ERROR = 'UNEXPECTED_ERROR';
    const ERROR_CODE_TIMEOUT = 'TIMEOUT';
    const ERROR_CODE_SUBSCRIPTION_LIMIT_EXCEEDED = 'SUBSCRIPTION_LIMIT_EXCEEDED';
    const ERROR_CODE_INVALID_REQUEST = 'INVALID_REQUEST';
    const ERROR_CODE_CONNECTION_FAILED = 'CONNECTION_FAILED';
    const ERROR_CODE_MAX_CONNECTION_LIMIT_EXCEEDED = 'MAX_CONNECTION_LIMIT_EXCEEDED';
    const STATUS_CODE_SUCCESS = 'SUCCESS';
    const STATUS_CODE_FAILURE = 'FAILURE';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getErrorCodeAllowableValues()
    {
        return [
            self::ERROR_CODE_NO_APP_KEY,
            self::ERROR_CODE_INVALID_APP_KEY,
            self::ERROR_CODE_NO_SESSION,
            self::ERROR_CODE_INVALID_SESSION_INFORMATION,
            self::ERROR_CODE_NOT_AUTHORIZED,
            self::ERROR_CODE_INVALID_INPUT,
            self::ERROR_CODE_INVALID_CLOCK,
            self::ERROR_CODE_UNEXPECTED_ERROR,
            self::ERROR_CODE_TIMEOUT,
            self::ERROR_CODE_SUBSCRIPTION_LIMIT_EXCEEDED,
            self::ERROR_CODE_INVALID_REQUEST,
            self::ERROR_CODE_CONNECTION_FAILED,
            self::ERROR_CODE_MAX_CONNECTION_LIMIT_EXCEEDED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusCodeAllowableValues()
    {
        return [
            self::STATUS_CODE_SUCCESS,
            self::STATUS_CODE_FAILURE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['connection_id'] = isset($data['connection_id']) ? $data['connection_id'] : null;
        $this->container['connection_closed'] = isset($data['connection_closed']) ? $data['connection_closed'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("NO_APP_KEY", "INVALID_APP_KEY", "NO_SESSION", "INVALID_SESSION_INFORMATION", "NOT_AUTHORIZED", "INVALID_INPUT", "INVALID_CLOCK", "UNEXPECTED_ERROR", "TIMEOUT", "SUBSCRIPTION_LIMIT_EXCEEDED", "INVALID_REQUEST", "CONNECTION_FAILED", "MAX_CONNECTION_LIMIT_EXCEEDED");
        if (!in_array($this->container['error_code'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'error_code', must be one of #{allowed_values}.";
        }

        $allowed_values = array("SUCCESS", "FAILURE");
        if (!in_array($this->container['status_code'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status_code', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("NO_APP_KEY", "INVALID_APP_KEY", "NO_SESSION", "INVALID_SESSION_INFORMATION", "NOT_AUTHORIZED", "INVALID_INPUT", "INVALID_CLOCK", "UNEXPECTED_ERROR", "TIMEOUT", "SUBSCRIPTION_LIMIT_EXCEEDED", "INVALID_REQUEST", "CONNECTION_FAILED", "MAX_CONNECTION_LIMIT_EXCEEDED");
        if (!in_array($this->container['error_code'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("SUCCESS", "FAILURE");
        if (!in_array($this->container['status_code'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets error_message
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     * @param string $error_message Additional message in case of a failure
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets error_code
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     * @param string $error_code The type of error in case of a failure
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $allowed_values = array('NO_APP_KEY', 'INVALID_APP_KEY', 'NO_SESSION', 'INVALID_SESSION_INFORMATION', 'NOT_AUTHORIZED', 'INVALID_INPUT', 'INVALID_CLOCK', 'UNEXPECTED_ERROR', 'TIMEOUT', 'SUBSCRIPTION_LIMIT_EXCEEDED', 'INVALID_REQUEST', 'CONNECTION_FAILED', 'MAX_CONNECTION_LIMIT_EXCEEDED');
        if (!in_array($error_code, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'error_code', must be one of 'NO_APP_KEY', 'INVALID_APP_KEY', 'NO_SESSION', 'INVALID_SESSION_INFORMATION', 'NOT_AUTHORIZED', 'INVALID_INPUT', 'INVALID_CLOCK', 'UNEXPECTED_ERROR', 'TIMEOUT', 'SUBSCRIPTION_LIMIT_EXCEEDED', 'INVALID_REQUEST', 'CONNECTION_FAILED', 'MAX_CONNECTION_LIMIT_EXCEEDED'");
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets connection_id
     * @return string
     */
    public function getConnectionId()
    {
        return $this->container['connection_id'];
    }

    /**
     * Sets connection_id
     * @param string $connection_id The connection id
     * @return $this
     */
    public function setConnectionId($connection_id)
    {
        $this->container['connection_id'] = $connection_id;

        return $this;
    }

    /**
     * Gets connection_closed
     * @return bool
     */
    public function getConnectionClosed()
    {
        return $this->container['connection_closed'];
    }

    /**
     * Sets connection_closed
     * @param bool $connection_closed Is the connection now closed
     * @return $this
     */
    public function setConnectionClosed($connection_closed)
    {
        $this->container['connection_closed'] = $connection_closed;

        return $this;
    }

    /**
     * Gets status_code
     * @return string
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     * @param string $status_code The status of the last request
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $allowed_values = array('SUCCESS', 'FAILURE');
        if (!in_array($status_code, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status_code', must be one of 'SUCCESS', 'FAILURE'");
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


