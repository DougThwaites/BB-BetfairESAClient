<?php
/**
 * MarketChange
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Betfair: Exchange Streaming API
 *
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * MarketChange Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MarketChange implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MarketChange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'rc' => '\Swagger\Client\Model\RunnerChange[]',
        'img' => 'bool',
        'tv' => 'double',
        'con' => 'bool',
        'market_definition' => '\Swagger\Client\Model\MarketDefinition',
        'id' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'rc' => 'rc',
        'img' => 'img',
        'tv' => 'tv',
        'con' => 'con',
        'market_definition' => 'marketDefinition',
        'id' => 'id'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'rc' => 'setRc',
        'img' => 'setImg',
        'tv' => 'setTv',
        'con' => 'setCon',
        'market_definition' => 'setMarketDefinition',
        'id' => 'setId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'rc' => 'getRc',
        'img' => 'getImg',
        'tv' => 'getTv',
        'con' => 'getCon',
        'market_definition' => 'getMarketDefinition',
        'id' => 'getId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rc'] = isset($data['rc']) ? $data['rc'] : null;
        $this->container['img'] = isset($data['img']) ? $data['img'] : null;
        $this->container['tv'] = isset($data['tv']) ? $data['tv'] : null;
        $this->container['con'] = isset($data['con']) ? $data['con'] : null;
        $this->container['market_definition'] = isset($data['market_definition']) ? $data['market_definition'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets rc
     * @return \Swagger\Client\Model\RunnerChange[]
     */
    public function getRc()
    {
        return $this->container['rc'];
    }

    /**
     * Sets rc
     * @param \Swagger\Client\Model\RunnerChange[] $rc Runner Changes - a list of changes to runners (or null if un-changed)
     * @return $this
     */
    public function setRc($rc)
    {
        $this->container['rc'] = $rc;

        return $this;
    }

    /**
     * Gets img
     * @return bool
     */
    public function getImg()
    {
        return $this->container['img'];
    }

    /**
     * Sets img
     * @param bool $img Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)
     * @return $this
     */
    public function setImg($img)
    {
        $this->container['img'] = $img;

        return $this;
    }

    /**
     * Gets tv
     * @return double
     */
    public function getTv()
    {
        return $this->container['tv'];
    }

    /**
     * Sets tv
     * @param double $tv The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)
     * @return $this
     */
    public function setTv($tv)
    {
        $this->container['tv'] = $tv;

        return $this;
    }

    /**
     * Gets con
     * @return bool
     */
    public function getCon()
    {
        return $this->container['con'];
    }

    /**
     * Sets con
     * @param bool $con Conflated - have more than a single change been combined (or null if not conflated)
     * @return $this
     */
    public function setCon($con)
    {
        $this->container['con'] = $con;

        return $this;
    }

    /**
     * Gets market_definition
     * @return \Swagger\Client\Model\MarketDefinition
     */
    public function getMarketDefinition()
    {
        return $this->container['market_definition'];
    }

    /**
     * Sets market_definition
     * @param \Swagger\Client\Model\MarketDefinition $market_definition Market Definition - the definition of the market (or null if un-changed)
     * @return $this
     */
    public function setMarketDefinition($market_definition)
    {
        $this->container['market_definition'] = $market_definition;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Market Id - the id of the market
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


