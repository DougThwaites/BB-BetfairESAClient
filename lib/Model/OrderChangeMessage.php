<?php
/**
 * OrderChangeMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Betfair: Exchange Streaming API
 *
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OrderChangeMessage Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderChangeMessage extends ResponseMessage implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderChangeMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'ct' => 'string',
        'clk' => 'string',
        'heartbeat_ms' => 'int',
        'pt' => 'int',
        'oc' => '\Swagger\Client\Model\OrderMarketChange[]',
        'initial_clk' => 'string',
        'conflate_ms' => 'int',
        'segment_type' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'ct' => 'ct',
        'clk' => 'clk',
        'heartbeat_ms' => 'heartbeatMs',
        'pt' => 'pt',
        'oc' => 'oc',
        'initial_clk' => 'initialClk',
        'conflate_ms' => 'conflateMs',
        'segment_type' => 'segmentType'
    );

    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'ct' => 'setCt',
        'clk' => 'setClk',
        'heartbeat_ms' => 'setHeartbeatMs',
        'pt' => 'setPt',
        'oc' => 'setOc',
        'initial_clk' => 'setInitialClk',
        'conflate_ms' => 'setConflateMs',
        'segment_type' => 'setSegmentType'
    );

    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'ct' => 'getCt',
        'clk' => 'getClk',
        'heartbeat_ms' => 'getHeartbeatMs',
        'pt' => 'getPt',
        'oc' => 'getOc',
        'initial_clk' => 'getInitialClk',
        'conflate_ms' => 'getConflateMs',
        'segment_type' => 'getSegmentType'
    );

    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    const CT_SUB_IMAGE = 'SUB_IMAGE';
    const CT_RESUB_DELTA = 'RESUB_DELTA';
    const CT_HEARTBEAT = 'HEARTBEAT';
    const SEGMENT_TYPE_SEG_START = 'SEG_START';
    const SEGMENT_TYPE_SEG = 'SEG';
    const SEGMENT_TYPE_SEG_END = 'SEG_END';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCtAllowableValues()
    {
        return [
            self::CT_SUB_IMAGE,
            self::CT_RESUB_DELTA,
            self::CT_HEARTBEAT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSegmentTypeAllowableValues()
    {
        return [
            self::SEGMENT_TYPE_SEG_START,
            self::SEGMENT_TYPE_SEG,
            self::SEGMENT_TYPE_SEG_END,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['ct'] = isset($data['ct']) ? $data['ct'] : null;
        $this->container['clk'] = isset($data['clk']) ? $data['clk'] : null;
        $this->container['heartbeat_ms'] = isset($data['heartbeat_ms']) ? $data['heartbeat_ms'] : null;
        $this->container['pt'] = isset($data['pt']) ? $data['pt'] : null;
        $this->container['oc'] = isset($data['oc']) ? $data['oc'] : null;
        $this->container['initial_clk'] = isset($data['initial_clk']) ? $data['initial_clk'] : null;
        $this->container['conflate_ms'] = isset($data['conflate_ms']) ? $data['conflate_ms'] : null;
        $this->container['segment_type'] = isset($data['segment_type']) ? $data['segment_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("SUB_IMAGE", "RESUB_DELTA", "HEARTBEAT");
        if (!in_array($this->container['ct'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'ct', must be one of #{allowed_values}.";
        }

        $allowed_values = array("SEG_START", "SEG", "SEG_END");
        if (!in_array($this->container['segment_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'segment_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("SUB_IMAGE", "RESUB_DELTA", "HEARTBEAT");
        if (!in_array($this->container['ct'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("SEG_START", "SEG", "SEG_END");
        if (!in_array($this->container['segment_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets ct
     * @return string
     */
    public function getCt()
    {
        return $this->container['ct'];
    }

    /**
     * Sets ct
     * @param string $ct Change Type - set to indicate the type of change - if null this is a delta)
     * @return $this
     */
    public function setCt($ct)
    {
        $allowed_values = array('SUB_IMAGE', 'RESUB_DELTA', 'HEARTBEAT');
        if (!in_array($ct, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'ct', must be one of 'SUB_IMAGE', 'RESUB_DELTA', 'HEARTBEAT'");
        }
        $this->container['ct'] = $ct;

        return $this;
    }

    /**
     * Gets clk
     * @return string
     */
    public function getClk()
    {
        return $this->container['clk'];
    }

    /**
     * Sets clk
     * @param string $clk Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
     * @return $this
     */
    public function setClk($clk)
    {
        $this->container['clk'] = $clk;

        return $this;
    }

    /**
     * Gets heartbeat_ms
     * @return int
     */
    public function getHeartbeatMs()
    {
        return $this->container['heartbeat_ms'];
    }

    /**
     * Sets heartbeat_ms
     * @param int $heartbeat_ms Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)
     * @return $this
     */
    public function setHeartbeatMs($heartbeat_ms)
    {
        $this->container['heartbeat_ms'] = $heartbeat_ms;

        return $this;
    }

    /**
     * Gets pt
     * @return int
     */
    public function getPt()
    {
        return $this->container['pt'];
    }

    /**
     * Sets pt
     * @param int $pt Publish Time (in millis since epoch) that the changes were generated
     * @return $this
     */
    public function setPt($pt)
    {
        $this->container['pt'] = $pt;

        return $this;
    }

    /**
     * Gets oc
     * @return \Swagger\Client\Model\OrderMarketChange[]
     */
    public function getOc()
    {
        return $this->container['oc'];
    }

    /**
     * Sets oc
     * @param \Swagger\Client\Model\OrderMarketChange[] $oc OrderMarketChanges - the modifications to account's orders (will be null on a heartbeat
     * @return $this
     */
    public function setOc($oc)
    {
        $this->container['oc'] = $oc;

        return $this;
    }

    /**
     * Gets initial_clk
     * @return string
     */
    public function getInitialClk()
    {
        return $this->container['initial_clk'];
    }

    /**
     * Sets initial_clk
     * @param string $initial_clk Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
     * @return $this
     */
    public function setInitialClk($initial_clk)
    {
        $this->container['initial_clk'] = $initial_clk;

        return $this;
    }

    /**
     * Gets conflate_ms
     * @return int
     */
    public function getConflateMs()
    {
        return $this->container['conflate_ms'];
    }

    /**
     * Sets conflate_ms
     * @param int $conflate_ms Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)
     * @return $this
     */
    public function setConflateMs($conflate_ms)
    {
        $this->container['conflate_ms'] = $conflate_ms;

        return $this;
    }

    /**
     * Gets segment_type
     * @return string
     */
    public function getSegmentType()
    {
        return $this->container['segment_type'];
    }

    /**
     * Sets segment_type
     * @param string $segment_type Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
     * @return $this
     */
    public function setSegmentType($segment_type)
    {
        $allowed_values = array('SEG_START', 'SEG', 'SEG_END');
        if (!in_array($segment_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'segment_type', must be one of 'SEG_START', 'SEG', 'SEG_END'");
        }
        $this->container['segment_type'] = $segment_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


