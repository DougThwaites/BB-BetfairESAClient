<?php
/**
 * OrderSubscriptionMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Betfair: Exchange Streaming API
 *
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OrderSubscriptionMessage Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderSubscriptionMessage extends RequestMessage implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderSubscriptionMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'segmentation_enabled' => 'bool',
        'order_filter' => '\Swagger\Client\Model\OrderFilter',
        'clk' => 'string',
        'heartbeat_ms' => 'int',
        'initial_clk' => 'string',
        'conflate_ms' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'segmentation_enabled' => 'segmentationEnabled',
        'order_filter' => 'orderFilter',
        'clk' => 'clk',
        'heartbeat_ms' => 'heartbeatMs',
        'initial_clk' => 'initialClk',
        'conflate_ms' => 'conflateMs'
    );

    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'segmentation_enabled' => 'setSegmentationEnabled',
        'order_filter' => 'setOrderFilter',
        'clk' => 'setClk',
        'heartbeat_ms' => 'setHeartbeatMs',
        'initial_clk' => 'setInitialClk',
        'conflate_ms' => 'setConflateMs'
    );

    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'segmentation_enabled' => 'getSegmentationEnabled',
        'order_filter' => 'getOrderFilter',
        'clk' => 'getClk',
        'heartbeat_ms' => 'getHeartbeatMs',
        'initial_clk' => 'getInitialClk',
        'conflate_ms' => 'getConflateMs'
    );

    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['segmentation_enabled'] = isset($data['segmentation_enabled']) ? $data['segmentation_enabled'] : null;
        $this->container['order_filter'] = isset($data['order_filter']) ? $data['order_filter'] : null;
        $this->container['clk'] = isset($data['clk']) ? $data['clk'] : null;
        $this->container['heartbeat_ms'] = isset($data['heartbeat_ms']) ? $data['heartbeat_ms'] : null;
        $this->container['initial_clk'] = isset($data['initial_clk']) ? $data['initial_clk'] : null;
        $this->container['conflate_ms'] = isset($data['conflate_ms']) ? $data['conflate_ms'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets segmentation_enabled
     * @return bool
     */
    public function getSegmentationEnabled()
    {
        return $this->container['segmentation_enabled'];
    }

    /**
     * Sets segmentation_enabled
     * @param bool $segmentation_enabled Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block
     * @return $this
     */
    public function setSegmentationEnabled($segmentation_enabled)
    {
        $this->container['segmentation_enabled'] = $segmentation_enabled;

        return $this;
    }

    /**
     * Gets order_filter
     * @return \Swagger\Client\Model\OrderFilter
     */
    public function getOrderFilter()
    {
        return $this->container['order_filter'];
    }

    /**
     * Sets order_filter
     * @param \Swagger\Client\Model\OrderFilter $order_filter
     * @return $this
     */
    public function setOrderFilter($order_filter)
    {
        $this->container['order_filter'] = $order_filter;

        return $this;
    }

    /**
     * Gets clk
     * @return string
     */
    public function getClk()
    {
        return $this->container['clk'];
    }

    /**
     * Sets clk
     * @param string $clk Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription
     * @return $this
     */
    public function setClk($clk)
    {
        $this->container['clk'] = $clk;

        return $this;
    }

    /**
     * Gets heartbeat_ms
     * @return int
     */
    public function getHeartbeatMs()
    {
        return $this->container['heartbeat_ms'];
    }

    /**
     * Sets heartbeat_ms
     * @param int $heartbeat_ms Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 30000)
     * @return $this
     */
    public function setHeartbeatMs($heartbeat_ms)
    {
        $this->container['heartbeat_ms'] = $heartbeat_ms;

        return $this;
    }

    /**
     * Gets initial_clk
     * @return string
     */
    public function getInitialClk()
    {
        return $this->container['initial_clk'];
    }

    /**
     * Sets initial_clk
     * @param string $initial_clk Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription
     * @return $this
     */
    public function setInitialClk($initial_clk)
    {
        $this->container['initial_clk'] = $initial_clk;

        return $this;
    }

    /**
     * Gets conflate_ms
     * @return int
     */
    public function getConflateMs()
    {
        return $this->container['conflate_ms'];
    }

    /**
     * Sets conflate_ms
     * @param int $conflate_ms Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)
     * @return $this
     */
    public function setConflateMs($conflate_ms)
    {
        $this->container['conflate_ms'] = $conflate_ms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


